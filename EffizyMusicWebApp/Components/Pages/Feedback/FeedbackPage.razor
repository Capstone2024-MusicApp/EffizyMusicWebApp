@page "/feedback"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Models.DTO
@inject EffizyMusicSystem.Services.EffizyMusicApplicationService EffizyService
@rendermode InteractiveServer

<div class="feedback-container">
    @if (feedbacks == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <label class="page-title">Feedback</label>
        <div style="max-height: 600px; overflow: auto; margin: auto; width:fit-content;">
        <table class="feedback-table">
            @foreach (var feedback in feedbacks)
            {
                <tr>
                    <td>
                        <label class="feedback-name">@feedback.FirstName @feedback.LastName</label> -
                        <label class="feedback-date" >@feedback.FeedbackDate.ToString("MMMM, dd yyyy HH:mm")</label>
                    </td>
                </tr>
                <tr >
                    <td>@feedback.Comments</td>
                </tr>
                <tr>
                    
                    <td><div style="border-bottom: solid 2px gray;"></div></td>
                </tr>
            }
        </table>
        </div>
        <br />
        <EditForm Model="@feedbackpost" OnValidSubmit="@Submit" FormName="feedbackForm">
            <table class="feedback-post">
                <tr>
                    <td>
                        <InputTextArea class="feedback-input" @bind-Value="feedbackpost.Comments" placeholder="Enter feedback here." />
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                    </td>
                </tr>
                <tr>
                    <td>
                        <button type="submit" class="btn btn-primary" style="width: 300px;">Submit</button>
                    </td>
                </tr>
            </table>
        </EditForm>
    }
</div>

@code {
    private List<FeedbackDTO>? feedbacks;

    private ValidationMessageStore? messageStore;

    [SupplyParameterFromForm]
    private Feedback feedbackpost { get; set; } = new Feedback();

    protected override async Task OnInitializedAsync()
    {
        feedbacks = await EffizyService.GetFeedbackDTOs();
    }


    private async Task Submit()
    {
        feedbackpost.UserID = 6;
        feedbackpost.FeedbackDate = DateTime.Now;
        feedbackpost.Comments = feedbackpost.Comments;

        await EffizyService.InsertFeedbackAsync(feedbackpost);
        feedbacks = await EffizyService.GetFeedbackDTOs();
        feedbackpost = new Feedback();
    }

}
