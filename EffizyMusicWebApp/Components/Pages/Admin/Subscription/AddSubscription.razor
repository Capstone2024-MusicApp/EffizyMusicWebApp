@page "/subscription/addSubscription"
@using EffizyMusicSystem.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject SubscriptionService subscriptionService
@inject CourseService courseService
@inject NavigationManager NavigationManager

<h3>Add Subscription</h3>

@if (subscription == null)
{
    <p>Loading...</p>
}
else
{
    <div class="form-group">
        <label for="Description">Subscription Description:</label>
        <select id="Description" @bind="@subscription.Description" class="form-control">
            <option value="" disabled selected>Select Subscription</option>
            <option value="Monthly Payment">Monthly Payment</option>
            <option value="Full Payment">Full Payment</option>
        </select>
    </div>

    <div class="form-group">
        <label for="Amount">Amount:</label>
        <input id="Amount" @bind="@subscription.Amount" class="form-control mb-3" type="number" step="0.01" />
    </div>


    <div class="form-group">
        <label for="EnrollmentDuration">Enrollment Duration (in months):</label>
        <InputNumber id="EnrollmentDuration" @bind-Value="@subscription.EnrollmentDuration" class="form-control mb-3" min="1"/>
    </div>

    <div class="form-group mb-5">
        <label for="CourseID">Course ID:</label>
        <select id="Title" @bind="@subscription.CourseID" class="form-control mb-3" required>
            <option value="0" disabled selected>Select Course</option>
            @if (courses != null)
            {
                @foreach (var course in courses)
                {
                    <option value="@course.CourseID">@course.Title</option>
                }
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" @onclick="SaveSubscription">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="text-danger mt-3">@Message</p>
    }
}

@code {
    private SubscriptionPlan subscription = new SubscriptionPlan();
    private List<Course> courses;
    string Message = "";

    protected override async Task OnInitializedAsync()
    {
        User user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());
        if (user.UserID == 0 || user.UserTypeID == Constants.UserType_Student)
        {
            NavigationManager.NavigateTo("/NotAuthorize/");
        }
        courses = await courseService.GetCoursesAsync();
    }

    private async Task SaveSubscription()
    {
        Message = "";

        if (string.IsNullOrEmpty(subscription.Description))
        {
            Message = "Please select a subscription description.";
            return;
        }

        if (subscription.Amount <= 0)
        {
            Message = "Please enter a valid amount.";
            return;
        }

        if (subscription.CourseID == 0)
        {
            Message = "Please select a course.";
            return;
        }

        if (subscription.EnrollmentDuration <= 0)
        {
            Message = "Please enter a valid Enrollment Duration.";
            return;
        }
        


        try
        {

            bool existingSubscription = await subscriptionService.CheckExistingSubscriptionAsync(subscription.Description, subscription.CourseID);

            if (existingSubscription)
            {
                Message = "A subscription of this type for this course already exists.";
                return;
            }


            subscription.Amount = Math.Round(subscription.Amount, 2);

            await subscriptionService.AddSubscriptionAsync(subscription);
            NavigationManager.NavigateTo("/subscription/viewSubscriptions");
        }
        catch (Exception ex)
        {
            Message = $"An error occurred: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/subscription/viewSubscriptions");
    }
}
