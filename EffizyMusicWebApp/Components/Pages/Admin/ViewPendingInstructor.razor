@page "/admin/view-pending-instructor/{InstructorId}"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Services
@using Microsoft.AspNetCore.Components
@using EffizyMusicSystem.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IInstructorService InstructorService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Instructor Details</h3>

@if (Instructor != null)
{
    <div>
        <p><strong>First Name:</strong> @Instructor.FirstName</p>
        <p><strong>Last Name:</strong> @Instructor.LastName</p>
        <p><strong>Gender:</strong> @Instructor.Gender</p>
        <p><strong>Phone:</strong> @Instructor.Phone</p>
        <p><strong>Location:</strong> @Instructor.Location</p>
        <p><strong>Status:</strong> @Instructor.Status</p>
        <p><strong>Instrument:</strong> @((Instructor.Instrument != null) ? Instructor.Instrument.InstrumentType : "N/A")</p>
        <p><strong>Years of Experience:</strong> @Instructor.YearsOfExperience</p>
        <p><strong>Reference Email:</strong> @Instructor.ReferenceEmail</p>
        <p><strong>Reference Phone:</strong> @Instructor.ReferencePhone</p>
        <button class="btn btn-success" @onclick="@ApproveInstructorAsync">Approve</button>
        <button class="btn btn-danger" @onclick="@RejectInstructorAsync">Reject</button>
    </div>
}
else
{
    <p>Instructor not found.</p>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@code {
    [Parameter]
    public string InstructorId { get; set; }
    private Instructor Instructor { get; set; }
    private string ErrorMessage { get; set; }
    public Instrument Instrument { get; set; } // Navigation property

    protected override async Task OnInitializedAsync()
    {
        User user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());
        if (user.UserID == 0 || user.UserTypeID == Constants.UserType_Student)
        {
            NavigationManager.NavigateTo("/NotAuthorize/");
        }
        await LoadInstructor();
    }

    private async Task LoadInstructor()
    {
        if (!string.IsNullOrEmpty(InstructorId) && int.TryParse(InstructorId, out int id))
        {
            Instructor = await InstructorService.GetInstructorByIdWithInstrumentAsync(id);

            if (Instructor != null && Instructor.Instrument == null)
            {
                // If Instrument is not found, set a default
                Instructor.Instrument = new Instrument { InstrumentType = "Default Instrument" };
            }
        }
    }

    async Task ApproveInstructorAsync()
    {
        try
        {
            await InstructorService.ApproveInstructorAsync(Instructor.InstructorID);
            Instructor.Status = "Approved";
            NavigationManager.NavigateTo("/admin/view-instructors");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    async Task RejectInstructorAsync()
    {
        try
        {
            await InstructorService.RejectInstructorAsync(Instructor.InstructorID);
            Instructor.Status = "Rejected";
            NavigationManager.NavigateTo("/admin/view-instructors");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
