@page "/AddLesson/"
@using EffizyMusicSystem.Models
@inject EffizyMusicSystem.Services.IEffizyMusicApplicationService EffizyService
@inject NavigationManager NavService
@rendermode InteractiveServer
<h2 class="display-3 text-center">Add Lesson</h2>

<hr />
    <EditForm Model="@LessonData" OnValidSubmit="SaveLessonInfo" FormName="Add-Lesson">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-outline mt-2">
                <label for="title" class="form-label">Lesson Title:</label>
                <InputText @bind-Value="LessonData.Title" class="form-control"></InputText>
            </div>
            <div class="form-outline mt-2">
                <label for="lessonMode" class="form-label">Lesson Mode:</label>
                <InputText @bind-Value="LessonData.LessonMode" class="form-control"></InputText>
            </div>
            @* <div class="form-outline mt-2">
                <label for="content" class="form-label">Lesson Content:</label>
            <input type="file" onchange="HandleFileSelected"><Icon Name="IconName.Uploadl"></Icon> Upload your Lesson File
            </div> *@
            <div class="form-outline mt-2">
                <label for="module" class="form-label">Choose Module:</label>
                <select class="form-control" @onchange="HandleSelectedValue" required>
                    <option value="">[Please Choose the Module...]</option>
                    @foreach (var module in ModuleList)
                    {
                        <option value="@module.ModuleID">@module.Title</option>
                    }
                </select>

                @* <ValidationMessage For="@(() => ModuleData.Course)" /> *@
                @* <ValidationMessage For="@(() => ModuleData.Course.CourseDescription)" class="row" /> *@
            </div>
            <button type="submit" class="btn btn-primary mt-4">Add Lesson</button>
        </div>
    </div>
</EditForm>

@* @if (!IsLessonAdded)
{
    <p class="text-center text-danger"><em>@ErrorMessage</em></p>
} *@
@code {



    [Parameter]
    public bool IsLessonAdded { get; set; }

    [Parameter]
    public string ErrorMessage { get; set; }

    // private byte[] videoBytes;

    public int ModuleId { get; set; }

    public List<Module> ModuleList = new();

    [SupplyParameterFromForm]
    protected Lesson LessonData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ModuleList = await EffizyService.GetModules();
    }
    public async void SaveLessonInfo()
    {
        LessonData.Module = await EffizyService.GetModuleByID(ModuleId);
        IsLessonAdded = await EffizyService.AddLesson(LessonData);
        if (IsLessonAdded)
        {
            NavService.NavigateTo("/ViewLesson/");
        }
        else
        {
            ErrorMessage = "Error in Adding Lesson";
        }
    }
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                file.OpenReadStream().CopyToAsync(stream);
                // videoBytes = stream.ToArray();
                LessonData.LessonContent = stream.ToArray();
            }
        }
    }
    private void HandleSelectedValue(ChangeEventArgs e)
    {
        ModuleId = Convert.ToInt32(e.Value);
    }
    private async Task<byte[]> ConvertStreamToByteArray(Stream stream)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            await stream.CopyToAsync(ms);
            return ms.ToArray();
        }
    }
}
