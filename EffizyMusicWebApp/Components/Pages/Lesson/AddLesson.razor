@page "/AddLesson/{ModuleId:int}"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Utils
@inject EffizyMusicSystem.Services.IEffizyMusicApplicationService EffizyService
@inject NavigationManager NavService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<h2 class="display-3 text-center">Add Lesson</h2>

<hr />
    <EditForm Model="@LessonData" OnValidSubmit="SaveLessonInfo" FormName="Add-Lesson">
        <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-outline mt-2">
                <label for="title" class="form-label">Lesson Title:</label>
                <InputText @bind-Value="LessonData.Title" class="form-control"></InputText>
                <ValidationMessage For="@(() => LessonData.Title)" />
            </div>

            <div class="form-outline mt-2">
                <label for="lessonMode" class="form-label">Lesson Mode:</label>
                <InputText @bind-Value="LessonData.LessonMode" class="form-control"></InputText>
            </div>
            <div class="form-outline mt-2">
                <label for="content" class="form-label">Lesson Content:</label>
                <Icon Name="IconName.Upload"></Icon> Upload your Lesson
                <InputFile OnChange="@HandleFileSelected" />
                <ValidationMessage For="@(() => LessonData.LessonContent)" />
            </div>

            <div class="form-outline mt-2">
                <label for="LessonOrder" class="form-label">Lesson Order:</label>
                <InputNumber @bind-Value="LessonData.LessonOrder" class="form-control"></InputNumber>
            </div>
   @*          <div class="form-outline mt-2">
                <label for="module" class="form-label">Choose Module:</label>
                <select class="form-control" @onchange="HandleSelectedValue" required>
                    <option value="">[Please Choose the Module...]</option>
                    @foreach (var module in ModuleList)
                    {
                        <option value="@module.ModuleID">@module.Title</option>
                    }
                </select>

                 <ValidationMessage For="@(() => LessonData.Module)" /> 
                @* <ValidationMessage For="@(() => ModuleData.Course.CourseDescription)" class="row" /> 
            </div> *@
            <button type="submit" class="btn btn-primary mt-4">Add Lesson</button>
        </div>
    </div>
</EditForm>

 @if (!IsLessonAdded)
{
    <p class="text-center text-danger"><em>@ErrorMessage</em></p>
} 
@code {

    private ElementReference fileInput;


    [Parameter]
    public bool IsLessonAdded { get; set; }

    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;

    // private byte[] videoBytes;
    [Parameter]
    public int ModuleId { get; set; }
    private long maxFileSize = 30 * 1024 * 1024;

    public List<Module> ModuleList = new();

    [SupplyParameterFromForm]
    protected Lesson LessonData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        User user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());
        // var UserID = ProtectedSessionStore.GetAsync<int>("UserID");
        if (user.UserID == 0 || user.UserTypeID == Constants.UserType_Student)
        {
            NavService.NavigateTo("/NotAuthorize/");
        }
        ModuleList = await EffizyService.GetModules();
    }
    public async void SaveLessonInfo()
    {
        LessonData.Module = await EffizyService.GetModuleByID(ModuleId);
        IsLessonAdded = await EffizyService.AddLesson(LessonData);
        if (IsLessonAdded)
        {
            NavService.NavigateTo($"/lessons/{ModuleId}");
        }
        else
        {
            ErrorMessage = "Error in Adding Lesson";
        }
    }


    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = new MemoryStream())
            {
                await  file.OpenReadStream(maxFileSize).CopyToAsync(stream);
                // Reset the stream position to the beginning
                stream.Seek(0, SeekOrigin.Begin);

                // Convert the memory stream to a byte array
                byte[] videoBytes = stream.ToArray();

                // Assign the byte array to the LessonContent property
                LessonData.LessonContent = videoBytes;
            }

            LessonData.LessonFileName = e.File.Name;
        }
    }

    private void HandleSelectedValue(ChangeEventArgs e)
    {
        ModuleId = Convert.ToInt32(e.Value);
    }
}
