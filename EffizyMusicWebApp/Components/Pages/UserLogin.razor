@page "/loginForm"
@inject ProtectedSessionStorage ProtectedSessionStore
@using EffizyMusicSystem.DAL
@using EffizyMusicSystem.Services
@using EffizyMusicSystem.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject EffizyMusicSystem.Services.EffizyMusicApplicationService EffizyService
@inject EffizyMusicSystem.Services.IInstructorService InstructService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container justify-content-center mt-4 mb-4">
    <EditForm Model="@user" OnValidSubmit="LoginUser" FormName="login" class="row g-3 justify-content-center">
        @* <DataAnnotationsValidator /> *@
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        <h3 class="text-center">User Login</h3>
        <div class="col-md-6">
            <div class="mb-4">
                <label for="Email" class="form-label">Email:</label>
                <InputText id="Email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="mb-4">
                <label for="Password" class="form-label">Password:</label>
                <InputText id="Password" @bind-Value="user.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <div class="mb-4">
                <button type="submit" class="btn btn-lg btn-primary">Login</button>
                <a class="btn btn-lg btn-dark" href="/registrationForm">
                    Register User
                </a>
            </div>
        </div>
    </EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    protected User user { get; set; }

    protected override void OnInitialized() => user ??= new();

    private string ErrorMessage { get; set; } = "";

    protected async Task LoginUser()
    {
        try
        {
            //Create the user first
            user = EffizyService.ValidateUser(user.Email, user.Password);

            if (user != null)
            {
                if (user.UserTypeID == 2)//if login user is instructor
                {
                    var instructor = await InstructService.GetInstructorByUserIdAsync(user.UserID);
                    if (instructor != null && instructor.Status.ToUpper() != "ACTIVE")
                    {
                        ErrorMessage = "Unable to login, Your status is pending for approval from admin.";
                        user = new User();
                        return;
                    }
                }

                await ProtectedSessionStore.SetAsync("Email", user.Email);
                await ProtectedSessionStore.SetAsync("UserID", user.UserID);
                await ProtectedSessionStore.SetAsync("UserTypeID", user.UserTypeID);

                await ProtectedSessionStore.SetAsync("User", user);
                var model = await ProtectedSessionStore.GetAsync<User>("User");

                    //You can get values from session from any other page, e.g
                var email = await ProtectedSessionStore.GetAsync<String>("Email");
                var UserID = await ProtectedSessionStore.GetAsync<int>("UserID");
                var UserTypeID = await ProtectedSessionStore.GetAsync<int>("UserTypeID");

                //Redirect to specific page.
                NavigationManager.NavigateTo("/profile", true);

                    //Redirect to specific page.
                    NavigationManager.NavigateTo("/", true);

               
            }
            else
            {
                ErrorMessage = "Invalid login credentials. Please try again.";
                user = new User();
            }
        }


        catch (Exception ex)
        {
            // Handle exception, log, etc.
            ErrorMessage = "An error occurred: " + ex.Message;
        }
    }

}