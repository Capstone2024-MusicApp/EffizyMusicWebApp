@page "/courseView"
@using EffizyMusicSystem.DAL
@using EffizyMusicSystem.Models
@using Microsoft.EntityFrameworkCore
@inject EffizyMusicContext _context
@inherits ComponentBase

<div class="container">
    @if (Courses != null && Courses.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Course Code</th>
                    <th>Course Description</th>
                    <th>Instrument ID</th>
                    <th>Instructor ID</th>
                    <th>Skill Level</th>
                    <th>Estimated Time</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var course in Courses)
                {
                    <tr>
                        <td>@course.Title</td>
                        <td>@course.CourseCode</td>
                        <td>@course.CourseDescription</td>
                        <td>@course.InstrumentID</td>
                        <td>@course.InstructorID</td>
                        <td>@course.SkillLevel</td>
                        <td>@course.EstimatedTime</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ViewCourse(course)">View</button>
                            <button class="btn btn-warning" @onclick="() => EditCourse(course)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCourse(course.CourseID)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No courses found.</p>
    }
</div>

@code {
    [Parameter]
    public List<Course> Courses { get; set; }

    [Parameter]
    public EventCallback<Course> OnViewCourse { get; set; }

    [Parameter]
    public EventCallback<Course> OnEditCourse { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteCourse { get; set; }

    public async Task<List<Course>> GetCoursesAsync()
    {
        return await _context.Courses.ToListAsync();
    }

    public async Task<Course> GetCourseByIdAsync(int courseId)
    {
        return await _context.Courses.FirstOrDefaultAsync(c=>c.CourseID == courseId);
    }

    public async Task AddCourseAsync(Course course)
    {
        _context.Courses.Add(course);
        await _context.SaveChangesAsync();
    }

    public async Task UpdateCourseAsync(Course course)
    {
        _context.Courses.Update(course);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteCourseAsync(int courseId)
    {
        var course = await _context.Courses.FindAsync(courseId);
        if (course != null)
        {
            _context.Courses.Remove(course);
            await _context.SaveChangesAsync();
        }
    }

    private void ViewCourse(Course course)
    {
        OnViewCourse.InvokeAsync(course);
    }

    private void EditCourse(Course course)
    {
        OnEditCourse.InvokeAsync(course);
    }

    private void DeleteCourse(int courseId)
    {
        OnDeleteCourse.InvokeAsync(courseId);
    }
}
