@page "/courses"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Services

@using EffizyMusicSystem.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore


@inject ICourseService CourseService
@inject NavigationManager NavigationManager
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />
<div class="container">
    <h1>Courses</h1>
    <div class="mb-3">
        <a href="/course/add" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add Course
        </a>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Course Code</th>
                <th>Description</th>
                <th>Instrument</th>
                <th>Instructor</th>
                <th>Skill Level</th>
                <th>Estimated Time</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in GetItemsOnCurrentPage())
            {
                <tr>
                    <td>@course.Title</td>
                    <td>@course.CourseCode</td>
                    <td>@course.CourseDescription</td>
                    <td>@course.Instrument.InstrumentType</td>
                    <td>@course.Instructor.FirstName @course.Instructor.LastName</td>
                    <td>@course.SkillLevel</td>
                    <td>@course.EstimatedTime</td>
                    <td>
                        <a href="@($"editcourse/{course.CourseID}")" class="btn btn-primary btn-sm">
                            <i class="fas fa-edit"></i>
                        </a><br />
                        <a href="@($"modules/{course.CourseID}")" class="btn btn-warning btn-md">  
                            Modules
                        </a>&nbsp;&nbsp;
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<PaginationComponent CurrentPage="@cp"
                     TotalPages="@TotalPages"
                     onPageChange="@HandlePageChange" />
@code {
    private List<Course> CourseList = new List<Course>();
    private int pageSize = 4;
    private int cp = 1;
    private int TotalPages => (int)Math.Ceiling((double)CourseList.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        User user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());
        if (user.UserID == 0 || user.UserTypeID == Constants.UserType_Student)
        {
            NavigationManager.NavigateTo("/NotAuthorize/");
        }
        if(user.UserTypeID == Constants.UserType_Instructor)
        {
            CourseList = await CourseService.GetCourseByInstructorAsync(user.UserID);
        }
        else
        CourseList = await CourseService.GetCoursesAsync();
    }

    private void EditCourse(int CourseID) => NavigationManager.NavigateTo($"/editCourse/{CourseID}");

    private IEnumerable<Course> GetItemsOnCurrentPage()
    {
        int startIndex = (cp - 1) * pageSize;
        return CourseList.Skip(startIndex).Take(pageSize);
    }

    private void HandlePageChange(int newPage)
    {
        cp = newPage;
    }

}
