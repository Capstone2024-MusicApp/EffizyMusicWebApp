@page "/editCourse"
@page "/editCourse/{CourseID:int}"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ICourseService CourseService
@inject NavigationManager NavigationManager

<h3>Edit Course</h3>

@if (Course != null)
{
    <EditForm Model="@Course" OnValidSubmit="UpdateCourse" formname="editCourseForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Title</label>
            <InputText @bind-Value="Course.Title" class="form-control" />
            <ValidationMessage For="@(() => Course.Title)" />
        </div>

        <div class="form-group">
            <label>Course Code</label>
            <InputText @bind-Value="Course.CourseCode" class="form-control" />
            <ValidationMessage For="@(() => Course.CourseCode)" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <InputTextArea @bind-Value="Course.CourseDescription" class="form-control" />
            <ValidationMessage For="@(() => Course.CourseDescription)" />
        </div>

        <div class="form-group">
            <label>Instrument</label>
            <select class="form-control" @bind="Course.InstrumentID">
                @foreach (var instrum in Instruments)
                {
                    <option value="@instrum.InstrumentID">@instrum.InstrumentType</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Instructor</label>
            <select class="form-control" @bind="Course.InstructorID">
                @foreach (var instruc in Instructors)
                {
                    <option value="@instruc.InstructorID">@($"{instruc.FirstName} {instruc.LastName}")</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Skill Level</label>
            <InputText @bind-Value="Course.SkillLevel" class="form-control" />
            <ValidationMessage For="@(() => Course.SkillLevel)" />
        </div>

        <div class="form-group">
            <label>Estimated Time</label>
            <InputText @bind-Value="Course.EstimatedTime" class="form-control" />
            <ValidationMessage For="@(() => Course.EstimatedTime)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int CourseID { get; set; }

    private Course Course;
    private List<Instrument> Instruments = new List<Instrument>();
    private List<Instructor> Instructors = new List<Instructor>();

    protected override async Task OnInitializedAsync()
    {
        Course = await CourseService.GetCourseByIdAsync(CourseID);
        Instruments = await CourseService.GetInstrumentsAsync();
        Instructors = await CourseService.GetInstructorsAsync();

        // Set selected InstrumentID and InstructorID
        Course.InstrumentID = Course.Instrument?.InstrumentID ?? 0;
        Course.InstructorID = Course.Instructor?.InstructorID ?? 0;
    }

    private async Task UpdateCourse()
    {
        // Update Course object with selected InstrumentID and InstructorID
        Course.Instrument = Instruments.FirstOrDefault(i => i.InstrumentID == Course.InstrumentID);
        Course.Instructor = Instructors.FirstOrDefault(i => i.InstructorID == Course.InstructorID);

        try
        {
            await CourseService.UpdateCourseAsync(Course);
            NavigationManager.NavigateTo("/courses");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error updating course: " + ex.Message;
            throw;
        }
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/courses");
    }
}
