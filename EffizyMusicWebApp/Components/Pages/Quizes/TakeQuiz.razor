@page "/takeQuiz/{quizId:int}/{count:int}/{enrollmentID:int}"
@using EffizyMusicSystem.Models
@inject EffizyMusicSystem.Services.EffizyMusicApplicationService EffizyService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager

<h3>Take Quiz</h3>
<hr />
@if(qp != null && qp.LastTaken.AddDays(1) > DateTime.Today)
{
    <div class="alert alert-warning" role="alert" style="text-align: center;">You will need 24 hours to re-attempt the quiz. You can retake this quiz on @qp.LastTaken.AddDays(1)</div>
}
else
{
<EditForm Model="@model" OnValidSubmit="SaveAnswer" FormName="takeQuiz">
    @* <DataAnnotationsValidator /> *@
    <div class="mb-3">
        <label class="form-label"><b>Question Text</b></label>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ErrorMessage
            </div>
        }
        <div class="col-md-4">
            <label class="form-label">@model.QuestionText</label>
        </div>
        <ValidationMessage For="@(() => model.QuestionText)" />

            <hr />
        @if (model.QuestionChoices != null)
         {
        <div><h5>Question Choices</h5></div>
        <InputRadioGroup @bind-Value="model.AnswerValue" Name="quiz" class="form-check">
            @for (int count = 1; count <= model.QuestionChoices.Count; count++)
            {
                <div class="form-group">
                    <label class="control-label"><h5>Choice @count:</h5></label><br>
                    @if (count == 1)
                    {
                        <InputRadio @bind-Value="@count" class="form-check-input" />
                        <label style="margin-right:10px;font-weight: normal">@model.QuestionChoices.ToList()[count - 1].ChoiceText</label>
                        <br />
                        <br />
                    }
                    @if (count == 2)
                    {
                        <InputRadio @bind-Value="@count" class="form-check-input"  />
                        <label style="margin-right:10px;font-weight: normal">@model.QuestionChoices.ToList()[count - 1].ChoiceText</label>
                        <br />
                        <br />
                    }
                    @if (count == 3)
                    {
                        <InputRadio @bind-Value="@count" class="form-check-input" />
                        <label style="margin-right:10px;font-weight: normal">@model.QuestionChoices.ToList()[count - 1].ChoiceText</label>
                        <br />
                        <br />
                    }
                    @if (count == 4)
                    {
                            <InputRadio @bind-Value="@count" class="form-check-input" />
                        <label style="margin-right:10px;font-weight: normal">@model.QuestionChoices.ToList()[count - 1].ChoiceText</label>
                        <br />
                        <br />
                    }
                    
                </div>
            }
            </InputRadioGroup>
         }
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <a class="btn btn-light" href="/quizes/@quizId">
            Cancel
        </a>
    </div>
    </EditForm>
    }
@code {
    [Parameter]
    public int quizId { get; set; }

    [Parameter]
    public int count { get; set; }
    [Parameter]
    public int enrollmentId { get; set; }

    public string ErrorMessage { get; set; } = String.Empty;

    private User user;
    //int count = 0;

    Question model = new Question();
    QuizProgress qp;

    List<Question> questions = new List<Question>();
    public int totalCount = 0;

    protected override async Task OnInitializedAsync()
    {

        user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());
        bool isLogin; //= await IsUserLogin();

        qp = EffizyService.getQuizProgress(enrollmentId, quizId);
        
        if(user == null || user.UserID == 0)
        {
            NavigationManager.NavigateTo("/loginForm", true);
            return;
        }
        questions = EffizyService.GetQuizQuestions(quizId);
        totalCount = questions.Count;
        model = questions[count];
    }

    protected async Task SaveAnswer()
    {
        ErrorMessage = String.Empty;
        if (!string.IsNullOrEmpty(model.QuestionText) && !string.IsNullOrEmpty(model.AnswerValue))
        {
            string answer = "E";
            switch(model.AnswerValue)
            {
                case "1":
                    answer = "A";
                    break;
                case "2":
                    answer = "B";
                    break;
                case "3":
                    answer = "C";
                    break;
                case "4":
                    answer = "D";
                    break;
            }

            QuizResult quizResult = new QuizResult
                {
                    QuestionId = model.Id,
                    QuizId = model.QuizId,
                    SelectedChoice = answer,
                    UserId = user.UserID,
                    CreatedDate = DateTime.Now
                };

            count++;
            await EffizyService.SaveQuizResult(quizResult);
            if (count == totalCount)
            {
                NavigationManager.NavigateTo("/quizResults/" + quizId + "/" + enrollmentId, true);
            }
            else
                NavigationManager.NavigateTo("/takeQuiz/" + quizId + "/" + count + "/" + enrollmentId, true);
        }
        else
        {
            ErrorMessage = "Please select a correct answer.";
        }
    }

    protected async Task<bool> IsUserLogin()
    {
        var email = await ProtectedSessionStore.GetAsync<String>("Email");
        if (email.Value != null)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
