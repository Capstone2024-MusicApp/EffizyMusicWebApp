@page "/editStudentProfile/{StudentID}"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Services
@using Microsoft.AspNetCore.Components
@using EffizyMusicSystem.Utils
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IUserProfileService UserProfileService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@rendermode InteractiveServer

<h3>Edit Student Profile</h3>
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-danger" role="alert">
        @Message
    </div>
}

@if (StudentProfile != null)
{
    <EditForm Model="@StudentProfile" OnValidSubmit="@UpdateProfile">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" class="form-control" @bind-Value="@StudentProfile.FirstName" />
            <ValidationMessage For="@(() => StudentProfile.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" class="form-control" @bind-Value="@StudentProfile.LastName" />
            <ValidationMessage For="@(() => StudentProfile.LastName)" />
        </div>

        <div class="form-group">
            <label for="gender">Gender</label>
            <InputText id="gender" class="form-control" @bind-Value="@StudentProfile.Gender" />
            <ValidationMessage For="@(() => StudentProfile.Gender)" />
        </div>

        <div class="form-group">
            <label for="phone">Phone</label>
            <InputText id="phone" class="form-control" @bind-Value="@StudentProfile.Phone" />
            <ValidationMessage For="@(() => StudentProfile.Phone)" />
        </div>

        @* <div class="form-group">
            <label for="skillLevel">Skill Level</label>
            <InputText id="skillLevel" class="form-control" @bind-Value="@StudentProfile.SkillLevel" readonly="readonly" />
            <ValidationMessage For="@(() => StudentProfile.SkillLevel)" />
        </div> *@

        @* <div class="form-group">
            <label for="grades">Grades</label>
            <InputNumber id="grades" class="form-control" @bind-Value="@StudentProfile.Grades" readonly="readonly" />
            <ValidationMessage For="@(() => StudentProfile.Grades)" />
        </div> *@

        <div class="form-group">
            <label for="paymentPlan">Payment Plan</label>
            <InputText id="paymentPlan" class="form-control" @bind-Value="@StudentProfile.PaymentPlan" readonly="readonly" />
            <ValidationMessage For="@(() => StudentProfile.PaymentPlan)" />
        </div>

        <div class="form-group">
            <button class="btn btn-primary" @onclick="UpdateProfile">Save</button>
            <button class="btn btn-secondary ml-2" @onclick="Back">Back</button>
        </div>
    </EditForm>
}
else if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <p>Student profile not found for ID: @StudentID</p>
}

@code {
    [Parameter]
    public string StudentID { get; set; }

    private Student StudentProfile { get; set; }
    private bool IsLoading { get; set; } = true;
    private string Message { get; set; }

    private User user;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await ProtectedSessionStore.GetAsync<User>("User");
            user = result.Value ?? new User();
            userId = user.UserID;

            if (user.UserTypeID == Constants.UserType_Student)
            {
                StudentProfile = await UserProfileService.GetStudentProfileAsync(userId);
                if (StudentProfile == null)
                {
                    Message = "Student profile not found.";
                }
            }
            else
            {
                Message = "Unauthorized access: You are not a student.";
            }
        }


        catch (Exception ex)
        {
            Message = $"Error retrieving instructor profile: {ex.Message}";
        }

    }

    private async Task UpdateProfile()
    {
        try
        {
            await UserProfileService.UpdateStudentProfileAsync(StudentProfile);
            NavigationManager.NavigateTo("/profile");
        }
        catch (Exception ex)
        {
            Message = $"Error updating the student profile: {ex.Message}";
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/profile");
    }
}
