@page "/StudentCourse/StudentCourses"
@using EffizyMusicSystem.Models
@using EffizyMusicSystem.Utils
@using EffizyMusicSystem.Models.DTO
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject NavigationManager NavigationManager

@inject ProtectedSessionStorage ProtectedSessionStore
@inject EffizyMusicSystem.Services.EffizyMusicApplicationService EffizyService

@inject ILogger<StudentCourses> Logger

<div class="container"> 

     <h2>Courses</h2>
    <br />
    @if (availablecourses == null)
    {
        <div style="margin: auto; vertical-align:middle; width: 100% height: 100%">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @if(user == null || user.UserID != 0)
        {
        <div class="main-student-course">
            <h3>Your Enrolled Courses</h3>
            <br />
            @if (enrolledCourses == null)
            {
                <p><em>No enrolled courses.</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Course Code</th>
                            <th>Progress</th>
                            <th>Access</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in enrolledCourses)
                        {
                            <tr>
                                <td>@course.Title</td>
                                <td>@course.CourseDescription</td>
                                <td>@course.CourseCode</td>
                                <td>@{
                                        double percentageComplete;
                                        if (course.TotalLessons == 0)
                                        { 
                                            percentageComplete = 100; 
                                        }
                                        else
                                        {
                                            percentageComplete = Math.Round(((double)course.CompletedLessons / (double)course.TotalLessons) * 100, 2);
                                        }
                                    }
                                        @percentageComplete%
                                    
                                </td>
                                <td><a href="\StudentCourse\AccessCourse\@course.EnrollmentID">Access Course</a></td>
                                <td>
                                    @if(course.CompletedLessons >= @course.TotalLessons)
                                        {
                                            {
                                                <Icon Name="IconName.CheckCircleFill" Style="padding-left: 5px;" Color="IconColor.Success" Size="IconSize.x5" />
                                            }
                                        }
                                        else
                                        {
                                            <Icon Name="IconName.CircleHalf" Style="padding-left: 5px;" Color="IconColor.Info" Size="IconSize.x5" />
                                        }
                                    </td>
                            </tr>
                        }
                    </tbody>
                </table>
             }
        </div>
            @*  <PaginationComponent CurrentPage="@cp"
        TotalPages="@TotalPagesEnrolledCourse"
        onPageChange="@HandlePageChange" /> *@
            <br />
            <br />
            <br />
        }
        <h3>Available Courses</h3>
            <br />
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Course Code</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in availablecourses)
                    {
                        <tr>
                            <td>@course.Title</td>
                            <td>@course.CourseDescription</td>
                            <td>@course.CourseCode</td>
                            <td><a href="/StudentCourse/ViewCourse/@course.CourseID">View Course</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        
                
                @* <PaginationComponent CurrentPage="@cp"
                         TotalPages="@TotalPagesCourse"
                         onPageChange="@HandlePageChange" /> *@
    }

</div>

@code {
    private List<Course>? availablecourses;
    private List<StudentCourseDTO>? enrolledCourses;

    private int pageSize = 4;
    private int cp = 1;
    // private int TotalPagesCourse => (int)Math.Ceiling((double)availablecourses.Count / pageSize);
    // private int TotalPagesEnrolledCourse => (int)Math.Ceiling((double)enrolledCourses.Count / pageSize);
    private User user = new User();


    protected override async Task OnInitializedAsync()
    {
        availablecourses = await EffizyService.GetCourses();

        user = ((await ProtectedSessionStore.GetAsync<User>("User")).Value ?? new User());

        if (user.UserTypeID != Constants.UserType_Student)
        {
            Logger.LogWarning("Student Course being accessed but no login detected.");
           // NavigationManager.NavigateTo("/NotAuthorize/");
        }
        else
        {
            enrolledCourses = await EffizyService.GetEnrolledCourses(user.UserID);
        }
    }
    private IEnumerable<Course> GetCoursesOnCurrentPage()
    {
        int startIndex = (cp - 1) * pageSize;
        return availablecourses.Skip(startIndex).Take(pageSize);
    }
    private IEnumerable<StudentCourseDTO> GetEnrolledOnCurrentPage()
    {
        int startIndex = (cp - 1) * pageSize;
        return enrolledCourses.Skip(startIndex).Take(pageSize);
    }

    private void HandlePageChange(int newPage)
    {
        cp = newPage;
    }


}

