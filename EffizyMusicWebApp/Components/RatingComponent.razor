<style>
    /* Styles.css */
    .rating {
        display: inline-block;
        font-size: 24px;
    }

    .star {
        cursor: pointer;
        color: gray;
        transition: color 0.3s;
    }

        .star:hover, .selected {
            color: gold;
        }
</style>
<!-- RatingComponent.razor -->
<div class="rating">

        <span class="star @(1 <= SelectedRating  ? "selected" : "")"
              @onclick="()=>SetRating(1)">
            &#9733;
        </span>

    <span class="star @(2 <= SelectedRating  ? "selected" : "")"
              @onclick="()=>SetRating(2)">
            &#9733;
        </span>

        <span class="star @(3 <= SelectedRating ? "selected" : "")"
              @onclick="()=>SetRating(3)">
            &#9733;
        </span>

        <span class="star @(4 <= SelectedRating  ? "selected" : "")"
              @onclick="()=>SetRating(4)">
            &#9733;
        </span>

    <span class="star @(5 <= SelectedRating  ? "selected" : "")"
          @onclick="()=>SetRating(5)">
        &#9733;
    </span>
    
</div>

@code {
    [Parameter]
    public double CurrentRating { get; set; }

    [Parameter]
    public EventCallback<int> RatingChanged { get; set; }

    private int SelectedRating = 0;


    private async Task SetRating(int rating)
    {
        if (SelectedRating == rating)
        {
            // If the same star is clicked again, deselect it
            SelectedRating = 0;
        }
        else
        {
            SelectedRating = rating;
        }
        await RatingChanged.InvokeAsync(SelectedRating);
    }
}
