@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase
@inject UserProfileService UserProfileService
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject IUserProfileService UserProfileService
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-2">
            @* @if (isLogin)
            {
                <button @onclick="@Logout" class="btn btn-md btn-primary">Logout</button>
            }
            else
            {
                <a href="/loginForm" class="btn btn-md btn-primary">Login</a>
            } *@

          
            @if (isLogin == false)
            {
                <span><strong>Welcome, <span class="text-danger">@fullName</span></strong></span>
                <button @onclick="@Logout" class="btn-link">Logout</button>
            }
            else
            {
                <button @onclick="@Logout" class="btn-link">Logout</button>
            }
        </div>
        <article class="content px-4">
            @Body
        </article>
        <Footer></Footer>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string fullName = "Not logged in";
    private bool isLogin = false;

    protected override async Task OnInitializedAsync()
    {
        isLogin = await IsUserLoggedIn();
        
    }

    private async Task<bool> IsUserLoggedIn()
    {
        var userIdResult = await ProtectedSessionStore.GetAsync<int>("UserID");
        return userIdResult.Success && userIdResult.Value != 0;

        if (isLogin)
        {
            return true;

        }
        else
        {
            return false;
        }
    }

    private async Task LoadUserDetails()
    {
        var userIdResult = await ProtectedSessionStore.GetAsync<int>("UserID");
        if (!userIdResult.Success || userIdResult.Value == 0)
        {
            fullName = "User ID not found";
            return;
        }

        int userId = userIdResult.Value;

        // Check for Student Profile first
        var student = await UserProfileService.GetStudentProfileAsync(userId);
        if (student != null)
        {
            fullName = $"{student.FirstName} {student.LastName}";
            return;
        }

        // If not a student, check for Instructor Profile
        var instructor = await UserProfileService.GetInstructorProfileAsync(userId);
        if (instructor != null)
        {
            fullName = $"{instructor.FirstName} {instructor.LastName}";
            return;
        }

        // If nothing found, set user as not found
        fullName = "Profile not found";
    }

    private async Task Logout()
    {
        await ProtectedSessionStore.DeleteAsync("User");
        await ProtectedSessionStore.DeleteAsync("Email");
        await ProtectedSessionStore.DeleteAsync("UserID");
        await ProtectedSessionStore.DeleteAsync("UserTypeID");
        await ProtectedSessionStore.DeleteAsync("User");
        

        // Redirect to login page
        NavigationManager.NavigateTo("/loginForm", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if the user is logged in
            isLogin = await IsUserLoggedIn();

            // Update the button text
            StateHasChanged();
        }
    }
}
